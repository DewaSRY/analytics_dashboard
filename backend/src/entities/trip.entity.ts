import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

/**
 * Represents a trip record in the database.
 *
 * The Trips entity stores information about individual trips,
 * including details such as vendor ID, pickup and dropoff
 * times, passenger count, trip distance, and various fees
 * associated with the trip.
 */
@Entity('trips')
export class Trips {
  /**
   * Unique identifier for the trip.
   * Auto-generated by the database.
   */
  @PrimaryGeneratedColumn()
  id: number;

  /**
   * A designation for the technology vendor that provided the record. CMT=Creative Mobile Technologies
   * VTS= VeriFone, Inc. DDS=Digital Dispatch Systems
   */
  @Column({ type: 'text', nullable: true })
  vendor_id: string | null;

  /**
   * The date and time when the meter was engaged.
   */
  @Column({ type: 'text', nullable: true })
  pickup_datetime: string | null;

  /**
   * The date and time when the meter was disengaged.
   */
  @Column({ type: 'text', nullable: true })
  dropoff_datetime: string | null;

  /**
   * The number of passengers in the vehicle. This is a driver-entered value.
   */
  @Column({ type: 'bigint', nullable: true })
  passenger_count: number | null;

  /**
   * The elapsed trip distance in miles reported by the taximeter.
   */
  @Column({ type: 'double precision', nullable: true })
  trip_distance: number | null;

  /**
   * Longitude where the meter was engaged.
   */
  @Column({ type: 'double precision', nullable: true })
  pickup_longitude: number | null;

  /**
   * Latitude where the meter was engaged.
   */
  @Column({ type: 'double precision', nullable: true })
  pickup_latitude: number | null;

  /**
   * This flag indicates whether the trip record was held in vehicle memory before
   * sending to the vendor, aka “store and forward,” because the vehicle did not have
   * a connection to the server. Y= store and forward trip N= not a store and forward trip
   */
  @Column({ type: 'text', nullable: true })
  store_and_fwd_flag: string | null;

  /**
   * Longitude where the meter was disengaged.
   */
  @Column({ type: 'double precision', nullable: true })
  dropoff_longitude: number | null;

  /**
   * Latitude where the meter was disengaged.
   */
  @Column({ type: 'double precision', nullable: true })
  dropoff_latitude: number | null;

  /**
   * A numeric code signifying how the passenger paid for the trip.
   * 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip
   */
  @Column({ type: 'text', nullable: true })
  payment_type: string | null;

  /**
   *The time-and-distance fare calculated by the meter..
   */
  @Column({ type: 'double precision', nullable: true })
  fare_amount: number | null;

  /**
   * $0.50 MTA tax that is automatically triggered based on the metered rate in use.
   */
  @Column({ type: 'double precision', nullable: true })
  mta_tax: number | null;

  /**
   * Tip amount – This field is automatically populated for credit card tips. Cash tips are not included.
   */
  @Column({ type: 'double precision', nullable: true })
  tip_amount: number | null;

  /**
   * Total amount of all tolls paid in trip.
   */
  @Column({ type: 'double precision', nullable: true })
  tolls_amount: number | null;

  /**
   * The total amount charged to passengers. Does not include cash tips.
   */
  @Column({ type: 'double precision', nullable: true })
  total_amount: number | null;

  /**
   * $0.30 improvement surcharge assessed trips at the flag drop. The improvement surcharge began being levied in 2015.
   */
  @Column({ type: 'double precision', nullable: true })
  imp_surcharge: number | null;

  /**
   * Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges.
   */
  @Column({ type: 'double precision', nullable: true })
  extra: number | null;

  /**
   * The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark
   * 4=Nassau or Westchester 5=Negotiated fare 6=Group ride
   */
  @Column({ type: 'bigint', nullable: true })
  rate_code: number | null;
}
